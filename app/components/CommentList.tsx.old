// CommentList Component
// app/components/CommentList.tsx

import { useState } from 'react';
import { Link, useFetcher } from '@remix-run/react';
import { Button } from '~/components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from '~/components/ui/avatar';
import { 
  Clock, 
  MoreHorizontal, 
  Trash2, 
  Flag,
  Heart,
  Reply,
  ChevronDown,
  ChevronUp
} from 'lucide-react';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '~/components/ui/dropdown-menu';
import type { CommentWithAuthor } from '~/db/community-schema';

interface CommentListProps {
  comments: CommentWithAuthor[];
  currentUserId: string;
  postId: string;
  showAll?: boolean;
  limit?: number;
}

export default function CommentList({ 
  comments, 
  currentUserId, 
  postId,
  showAll = false,
  limit = 5 
}: CommentListProps) {
  const [showAllComments, setShowAllComments] = useState(showAll);
  const deleteFetcher = useFetcher();

  if (!comments || comments.length === 0) {
    return (
      <div className="text-center py-8 text-gray-500">
        <div className="text-sm">Belum ada komentar</div>
        <div className="text-xs mt-1">Jadilah yang pertama berkomentar!</div>
      </div>
    );
  }

  const displayedComments = showAllComments ? comments : comments.slice(0, limit);
  const hasMoreComments = comments.length > limit;

  const formatRelativeTime = (date: Date): string => {
    const now = new Date();
    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);

    if (diffInSeconds < 60) return 'baru saja';
    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m`;
    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}j`;
    if (diffInSeconds < 604800) return `${Math.floor(diffInSeconds / 86400)}h`;

    return date.toLocaleDateString('id-ID', {
      day: 'numeric',
      month: 'short',
    });
  };

  const getInitials = (name: string): string => {
    return name
      .split(' ')
      .map(n => n[0])
      .join('')
      .toUpperCase()
      .slice(0, 2);
  };

  const handleDelete = (commentId: string) => {
    if (confirm('Yakin ingin menghapus komentar ini?')) {
      const formData = new FormData();
      formData.append('commentId', commentId);
      formData.append('action', 'delete');

      deleteFetcher.submit(formData, {
        method: 'POST',
        action: '/api/community/comment',
      });
    }
  };

  return (
    <div className="space-y-4">
      {/* Comments list */}
      <div className="space-y-4">
        {displayedComments.map((comment) => {
          const canDelete = currentUserId === comment.userId; // Add admin check later
          
          return (
            <div key={comment.id} className="flex space-x-3">
              {/* Avatar */}
              <Avatar className="h-8 w-8 flex-shrink-0">
                <AvatarImage 
                  src={comment.user.avatarUrl || undefined} 
                  alt={comment.user.name} 
                />
                <AvatarFallback className="text-xs">
                  {getInitials(comment.user.name)}
                </AvatarFallback>
              </Avatar>

              {/* Comment content */}
              <div className="flex-1 min-w-0">
                <div className="bg-gray-50 dark:bg-gray-800 rounded-2xl px-4 py-3">
                  {/* Author and timestamp */}
                  <div className="flex items-center justify-between mb-1">
                    <div className="flex items-center space-x-2">
                      <span className="font-semibold text-sm text-gray-900 dark:text-gray-100">
                        {comment.user.name}
                      </span>
                      <div className="px-2 py-0.5 bg-green-100 text-green-800 text-xs rounded-full">
                        Santri
                      </div>
                    </div>

                    {/* Options menu */}
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" size="sm" className="h-6 w-6 p-0 text-gray-400 hover:text-gray-600">
                          <MoreHorizontal className="h-3 w-3" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end" className="w-40">
                        {!canDelete && (
                          <DropdownMenuItem className="text-red-600">
                            <Flag className="mr-2 h-3 w-3" />
                            Laporkan
                          </DropdownMenuItem>
                        )}
                        
                        {canDelete && (
                          <DropdownMenuItem 
                            onClick={() => handleDelete(comment.id)}
                            className="text-red-600"
                            disabled={deleteFetcher.state === 'submitting'}
                          >
                            <Trash2 className="mr-2 h-3 w-3" />
                            Hapus
                          </DropdownMenuItem>
                        )}
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </div>

                  {/* Comment text */}
                  <div className="text-sm text-gray-900 dark:text-gray-100 leading-relaxed whitespace-pre-wrap">
                    {comment.content}
                  </div>
                </div>

                {/* Actions and timestamp */}
                <div className="flex items-center space-x-4 mt-2 ml-4">
                  <time className="text-xs text-gray-500">
                    {formatRelativeTime(new Date(comment.createdAt))}
                  </time>
                  
                  {/* Like button (for future implementation) */}
                  <button className="text-xs text-gray-500 hover:text-blue-600 font-medium">
                    Suka
                  </button>
                  
                  {/* Reply button (for future implementation) */}
                  <button className="text-xs text-gray-500 hover:text-blue-600 font-medium">
                    Balas
                  </button>
                </div>
              </div>
            </div>
          );
        })}
      </div>

      {/* Show more/less button */}
      {hasMoreComments && (
        <div className="text-center">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setShowAllComments(!showAllComments)}
            className="text-blue-600 hover:text-blue-700"
          >
            {showAllComments ? (
              <>
                <ChevronUp className="w-4 h-4 mr-1" />
                Sembunyikan komentar
              </>
            ) : (
              <>
                <ChevronDown className="w-4 h-4 mr-1" />
                Lihat {comments.length - limit} komentar lainnya
              </>
            )}
          </Button>
        </div>
      )}

      {/* View all comments link */}
      {!showAll && comments.length > 3 && (
        <div className="text-center">
          <Link
            to={`/community/post/${postId}`}
            className="text-sm text-blue-600 hover:text-blue-700 font-medium"
          >
            Lihat semua {comments.length} komentar
          </Link>
        </div>
      )}

      {/* Delete error */}
      {deleteFetcher.data?.error && (
        <div className="text-sm text-red-600 text-center">
          {deleteFetcher.data.error}
        </div>
      )}
    </div>
  );
}
