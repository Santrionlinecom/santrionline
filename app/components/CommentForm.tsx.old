// CommentForm Component
// app/components/CommentForm.tsx

import { useState } from 'react';
import { useFetcher } from '@remix-run/react';
import { Button } from '~/components/ui/button';
import { Textarea } from '~/components/ui/textarea';
import { Avatar, AvatarFallback, AvatarImage } from '~/components/ui/avatar';
import { Send, Loader2 } from 'lucide-react';

interface CommentFormProps {
  postId: string;
  user: {
    id: string;
    name: string;
    avatarUrl: string | null;
  };
  onSuccess?: () => void;
  placeholder?: string;
}

export default function CommentForm({ 
  postId, 
  user, 
  onSuccess,
  placeholder = "Tulis komentar..." 
}: CommentFormProps) {
  const [content, setContent] = useState('');
  const fetcher = useFetcher();

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!content.trim()) return;

    const formData = new FormData();
    formData.append('postId', postId);
    formData.append('content', content.trim());
    formData.append('action', 'comment');

    fetcher.submit(formData, {
      method: 'POST',
      action: '/api/community/comment',
    });
  };

  // Handle enter key
  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSubmit(e);
    }
  };

  // Reset form on success
  if (fetcher.data?.success && content) {
    setContent('');
    onSuccess?.();
  }

  const isSubmitting = fetcher.state === 'submitting';

  const getInitials = (name: string): string => {
    return name
      .split(' ')
      .map(n => n[0])
      .join('')
      .toUpperCase()
      .slice(0, 2);
  };

  return (
    <div className="border-t pt-4">
      <form onSubmit={handleSubmit} className="flex space-x-3">
        <Avatar className="h-8 w-8 flex-shrink-0">
          <AvatarImage src={user.avatarUrl || undefined} alt={user.name} />
          <AvatarFallback className="text-xs">
            {getInitials(user.name)}
          </AvatarFallback>
        </Avatar>
        
        <div className="flex-1 space-y-2">
          <Textarea
            value={content}
            onChange={(e) => setContent(e.target.value)}
            onKeyDown={handleKeyDown}
            placeholder={placeholder}
            className="min-h-[80px] resize-none border-gray-200 focus:border-blue-500 focus:ring-blue-500"
            disabled={isSubmitting}
            maxLength={1000}
          />
          
          <div className="flex items-center justify-between">
            <div className="text-xs text-gray-500">
              {content.length}/1000 â€¢ Tekan Enter untuk kirim, Shift+Enter untuk baris baru
            </div>
            
            <Button
              type="submit"
              size="sm"
              disabled={!content.trim() || isSubmitting}
              className="px-4"
            >
              {isSubmitting ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  Mengirim...
                </>
              ) : (
                <>
                  <Send className="w-4 h-4 mr-2" />
                  Kirim
                </>
              )}
            </Button>
          </div>
          
          {fetcher.data?.error && (
            <div className="text-sm text-red-600">
              {fetcher.data.error}
            </div>
          )}
        </div>
      </form>
    </div>
  );
}
