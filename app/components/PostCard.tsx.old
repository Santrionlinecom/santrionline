// PostCard Component
// app/components/PostCard.tsx

import { useState } from 'react';
import { Link, useFetcher } from '@remix-run/react';
import { Card, CardContent } from '~/components/ui/card';
import { Button } from '~/components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from '~/components/ui/avatar';
import { 
  Heart, 
  MessageCircle, 
  Share2, 
  MoreHorizontal,
  Clock,
  Eye,
  Trash2,
  Flag,
  Copy,
  ExternalLink
} from 'lucide-react';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '~/components/ui/dropdown-menu';
import { toast } from '~/components/ui/use-toast';
import ImageGrid from '~/components/community/ImageGrid';
import type { PostWithAuthor } from '~/db/community-schema';

interface PostCardProps {
  post: PostWithAuthor;
  currentUserId: string;
  showComments?: boolean;
  onCommentClick?: () => void;
}

export default function PostCard({ 
  post, 
  currentUserId, 
  showComments = true,
  onCommentClick 
}: PostCardProps) {
  const [showFullContent, setShowFullContent] = useState(false);
  const [optimisticLiked, setOptimisticLiked] = useState(post.isLiked);
  const [optimisticLikesCount, setOptimisticLikesCount] = useState(post.likesCount);
  
  const likeFetcher = useFetcher();
  const deleteFetcher = useFetcher();
  const shareFetcher = useFetcher();

  // Content handling
  const contentLines = post.content?.split('\n') || [];
  const shouldTruncate = contentLines.length > 4 || (post.content?.length || 0) > 300;
  const displayContent = shouldTruncate && !showFullContent 
    ? contentLines.slice(0, 4).join('\n') + (contentLines.length > 4 ? '...' : '')
    : post.content;

  // Like handler with optimistic UI
  const handleLike = () => {
    // Optimistic update
    setOptimisticLiked(!optimisticLiked);
    setOptimisticLikesCount(prev => optimisticLiked ? prev - 1 : prev + 1);

    // Submit to server
    const formData = new FormData();
    formData.append('postId', post.id);
    formData.append('action', optimisticLiked ? 'unlike' : 'like');

    likeFetcher.submit(formData, {
      method: 'POST',
      action: '/api/community/like',
    });
  };

  // Share handler
  const handleShare = () => {
    const formData = new FormData();
    formData.append('postId', post.id);
    formData.append('action', 'share');

    shareFetcher.submit(formData, {
      method: 'POST',
      action: '/api/community/share',
    });
  };

  // Copy link
  const handleCopyLink = async () => {
    const url = `${window.location.origin}/community/post/${post.id}`;
    try {
      await navigator.clipboard.writeText(url);
      toast({
        title: 'Link disalin!',
        description: 'Link post telah disalin ke clipboard',
      });
    } catch (error) {
      console.error('Failed to copy link:', error);
    }
  };

  // Delete handler
  const handleDelete = () => {
    if (confirm('Yakin ingin menghapus post ini?')) {
      const formData = new FormData();
      formData.append('postId', post.id);
      formData.append('action', 'delete');

      deleteFetcher.submit(formData, {
        method: 'POST',
        action: '/api/community/delete',
      });
    }
  };

  // Format relative time
  const formatRelativeTime = (date: Date): string => {
    const now = new Date();
    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);

    if (diffInSeconds < 60) return 'Baru saja';
    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} menit lalu`;
    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} jam lalu`;
    if (diffInSeconds < 604800) return `${Math.floor(diffInSeconds / 86400)} hari lalu`;

    return date.toLocaleDateString('id-ID', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
    });
  };

  // Get user initials
  const getInitials = (name: string): string => {
    return name
      .split(' ')
      .map(n => n[0])
      .join('')
      .toUpperCase()
      .slice(0, 2);
  };

  const canDelete = currentUserId === post.author.id; // Add admin check later

  return (
    <Card className="hover:shadow-lg transition-shadow duration-200">
      <CardContent className="p-6">
        {/* Share indicator */}
        {post.shareParent && (
          <div className="flex items-center text-sm text-muted-foreground mb-4">
            <Share2 className="w-4 h-4 mr-2" />
            <span>{post.author.name} membagikan postingan dari {post.shareParent.author.name}</span>
          </div>
        )}

        {/* Post header */}
        <div className="flex items-start justify-between mb-4">
          <div className="flex items-center space-x-3">
            <Avatar className="h-10 w-10">
              <AvatarImage src={post.author.avatarUrl || undefined} alt={post.author.name} />
              <AvatarFallback>{getInitials(post.author.name)}</AvatarFallback>
            </Avatar>
            
            <div>
              <div className="flex items-center space-x-2">
                <h4 className="font-semibold text-gray-900 dark:text-gray-100">
                  {post.author.name}
                </h4>
                <div className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">
                  Santri
                </div>
              </div>
              
              <div className="flex items-center space-x-2 text-sm text-muted-foreground">
                <Clock className="w-3 h-3" />
                <time>{formatRelativeTime(new Date(post.createdAt))}</time>
                
                {/* View count */}
                <span>•</span>
                <div className="flex items-center space-x-1">
                  <Eye className="w-3 h-3" />
                  <span>{post.views || 0}</span>
                </div>
              </div>
            </div>
          </div>

          {/* More options */}
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={handleCopyLink}>
                <Copy className="mr-2 h-4 w-4" />
                Salin Link
              </DropdownMenuItem>
              <DropdownMenuItem asChild>
                <Link to={`/community/post/${post.id}`}>
                  <ExternalLink className="mr-2 h-4 w-4" />
                  Lihat Detail
                </Link>
              </DropdownMenuItem>
              
              {!canDelete && (
                <>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem className="text-red-600">
                    <Flag className="mr-2 h-4 w-4" />
                    Laporkan
                  </DropdownMenuItem>
                </>
              )}
              
              {canDelete && (
                <>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem 
                    onClick={handleDelete}
                    className="text-red-600"
                    disabled={deleteFetcher.state === 'submitting'}
                  >
                    <Trash2 className="mr-2 h-4 w-4" />
                    Hapus
                  </DropdownMenuItem>
                </>
              )}
            </DropdownMenuContent>
          </DropdownMenu>
        </div>

        {/* Post content */}
        <div className="mb-4">
          <div className="text-gray-900 dark:text-gray-100 leading-relaxed whitespace-pre-wrap">
            {displayContent}
          </div>
          
          {shouldTruncate && (
            <button
              onClick={() => setShowFullContent(!showFullContent)}
              className="text-blue-600 hover:text-blue-700 text-sm font-medium mt-2"
            >
              {showFullContent ? 'Sembunyikan' : 'Lihat selengkapnya'}
            </button>
          )}
        </div>

        {/* Post images */}
        {post.images && post.images.length > 0 && (
          <div className="mb-4">
            <ImageGrid images={post.images} />
          </div>
        )}

        {/* Shared post content */}
        {post.shareParent && (
          <div className="mb-4 p-4 border rounded-lg bg-gray-50 dark:bg-gray-800">
            <div className="flex items-center space-x-2 mb-2">
              <Avatar className="h-6 w-6">
                <AvatarFallback className="text-xs">
                  {getInitials(post.shareParent.author.name)}
                </AvatarFallback>
              </Avatar>
              <span className="text-sm font-medium">{post.shareParent.author.name}</span>
              <span className="text-xs text-muted-foreground">
                • {formatRelativeTime(new Date(post.shareParent.createdAt))}
              </span>
            </div>
            <div className="text-sm text-gray-600 dark:text-gray-300">
              {post.shareParent.content}
            </div>
          </div>
        )}

        {/* Action buttons */}
        <div className="flex items-center justify-between pt-4 border-t">
          <div className="flex items-center space-x-6">
            {/* Like */}
            <button
              onClick={handleLike}
              disabled={likeFetcher.state === 'submitting'}
              className={`flex items-center space-x-2 transition-colors ${
                optimisticLiked 
                  ? 'text-red-500 hover:text-red-600' 
                  : 'text-gray-500 hover:text-red-500'
              }`}
            >
              <Heart 
                className={`w-5 h-5 ${optimisticLiked ? 'fill-current' : ''}`} 
              />
              <span className="text-sm font-medium">{optimisticLikesCount}</span>
            </button>

            {/* Comment */}
            <button
              onClick={onCommentClick}
              className="flex items-center space-x-2 text-gray-500 hover:text-blue-500 transition-colors"
            >
              <MessageCircle className="w-5 h-5" />
              <span className="text-sm font-medium">{post.commentsCount}</span>
            </button>

            {/* Share */}
            <button
              onClick={handleShare}
              disabled={shareFetcher.state === 'submitting'}
              className="flex items-center space-x-2 text-gray-500 hover:text-green-500 transition-colors"
            >
              <Share2 className="w-5 h-5" />
              <span className="text-sm font-medium">Bagikan</span>
            </button>
          </div>

          {/* View detail link */}
          {showComments && (
            <Link
              to={`/community/post/${post.id}`}
              className="text-sm text-blue-600 hover:text-blue-700 font-medium"
            >
              Lihat komentar
            </Link>
          )}
        </div>

        {/* Success/Error states */}
        {shareFetcher.data?.success && (
          <div className="mt-2 text-sm text-green-600">
            Post berhasil dibagikan!
          </div>
        )}
        
        {(likeFetcher.data?.error || shareFetcher.data?.error || deleteFetcher.data?.error) && (
          <div className="mt-2 text-sm text-red-600">
            {likeFetcher.data?.error || shareFetcher.data?.error || deleteFetcher.data?.error}
          </div>
        )}
      </CardContent>
    </Card>
  );
}
